# Makefile for curriculum project management

SHELL := $(shell which bash)

# default target when running `make`
default: help

.PHONY: help
help: ## Brief usage summary
	@grep -E '^[a-zA-Z._-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[34m%s\033[0m\t%s\n", $$1, $$2}' | column -ts$$'\t'

######################
# Curriculum Content #
######################

# where the curriculum content lives
CONTENT_DIR := content
# where to put the built markdown
MD_OUTPUT_DIR := build/markdown

# Source files, i.e. Inputs
SRC_NOTEBOOKS := $(shell find $(CONTENT_DIR) -name \*.ipynb | grep -v .ipynb_checkpoints)
SRC_MARKDOWN := $(shell find $(CONTENT_DIR) -name \*.md)
SRC_IMAGES := $(shell find $(CONTENT_DIR) -name \*.png -o -name \*.jpeg -o -name \*.jpg -o -name \*.gif -o -name \*.svg)
SRC_VIZ_MODULES := $(shell find $(CONTENT_DIR) -name viz.py)

# Outputs
MD_NOTEBOOKS := $(patsubst $(CONTENT_DIR)/%.ipynb, $(MD_OUTPUT_DIR)/%.md, $(SRC_NOTEBOOKS))
MD_IMAGES := $(patsubst $(CONTENT_DIR)/%, $(MD_OUTPUT_DIR)/%, $(SRC_IMAGES))
MD_MARKDOWN := $(patsubst $(CONTENT_DIR)/%, $(MD_OUTPUT_DIR)/%, $(SRC_MARKDOWN))
MD_VIZ_MODULES := $(patsubst $(CONTENT_DIR)/%, $(MD_OUTPUT_DIR)/%, $(SRC_VIZ_MODULES))

# Maximum amount of time a cell is allowed to run. If it takes longer than this
# an error will be raised (see INTERRUPT_ON_TIMEOUT for changing this behavior.)
# 900 seconds = 15 minutes, 600 seconds = 10 minutes, 300 seconds = 5 mintes
NOTEBOOK_TIMEOUT := 300

# What should happen when a cell hits the timeout limit?
#
# - When True, interrupt the cell and continue executing the rest of the cells
#   in the notebook
# - When False, a timeout will be an error
#
# Note that this needs to be formatted like a python boolean value, it should be
# capitalized
INTERRUPT_ON_TIMEOUT := False

# Here we build up the command that will run a notebook in-place
RUN_NOTEBOOK_INPLACE := jupyter nbconvert
RUN_NOTEBOOK_INPLACE += --clear-output --inplace --execute
RUN_NOTEBOOK_INPLACE += --ExecutePreprocessor.interrupt_on_timeout=$(INTERRUPT_ON_TIMEOUT)
RUN_NOTEBOOK_INPLACE += --ExecutePreprocessor.timeout=$(NOTEBOOK_TIMEOUT)

# Rule to convert notebooks to markdown files
#
# Here we'll check to see if there's any modifications to the notebook and bail
# out if there are. The reason for this is because the process of running the
# notebook inplace can change the autogenerated outputs within a notebook, and
# we will use git to remove those changes after the notebook is built. Without
# this check we could potentially lose uncommitted changes within a notebook.
$(MD_OUTPUT_DIR)/%.md: $(CONTENT_DIR)/%.ipynb
	@(test -f .git/index.lock && sleep "$$((RANDOM%3 + 1)).$$((RANDOM%10 + 1))") || true
	@if git status --short | grep -q `basename $<` ; then\
		echo 'Please commit any changes to $< before proceeding' ;\
		exit 1 ;\
	fi
	@echo -e "$< â†’ $@"
	@mkdir -p $(dir $@)
	@$(RUN_NOTEBOOK_INPLACE) $< || (echo -e 'Error building $<' && exit 1)
	@jupyter nbconvert --to markdown $< 2>/dev/null
	@mv $(patsubst %.ipynb, %.md, $<) $@
	@git checkout $<
	@touch $@
# Rule for everything else that is not a notebook
$(MD_OUTPUT_DIR)/%: $(CONTENT_DIR)/%
	@mkdir -p $(dir $@)
	cp $< $@

# How to generate the mkdocs config file
build/mkdocs.yml: table-of-contents.yml build/config.yml
	cat build/config.yml <(echo) table-of-contents.yml > build/mkdocs.yml

# static assets
.PHONY: static-assets
static-assets: build/markdown/static-assets $(LOGOS)
build/markdown/static-assets: content/static-assets
	@rm -fr build/markdown/static-assets
	@cp -R content/static-assets build/markdown/static-assets
	@find build/markdown/static-assets -type l -delete
	@cp content/logo.png build/markdown/logo.png
	@mkdir -p build/markdown/img
	@cp content/logo.png build/markdown/img/logo.png
	@cp content/favicon.ico build/markdown/img/favicon.ico

.PHONY: build-notebooks copy-markdown copy-images markdown
build-notebooks: $(MD_NOTEBOOKS)
copy-markdown: $(MD_MARKDOWN)
copy-images: $(MD_IMAGES)
viz-modules: $(MD_VIZ_MODULES)
markdown: build-notebooks copy-markdown copy-images static-assets viz-modules

.PHONY: build
# we need to explicityly call copy-images again because the process of building
# generates some png files that would otherwise be missed
build: markdown build/mkdocs.yml ## Build the HTML from the markdown files
	@$(MAKE) copy-images
	@scripts/generate_toc.py > build/markdown/index.md
	@cd build && . env/bin/activate && mkdocs build

.PHONY: preview
preview: ## Preview the built curriculum files
	@[ -d build/site ] || (echo 'build/site not found! Did you build the curriculum?' && false)
	@[ `uname -s` = Darwin ] && open http://localhost:8000
	cd build/site && python3 -m http.server

############
# Handouts #
############

# Use the newer pandoc (v2.x) (presumably from brew), as opposed to anaconda's
# pandoc (which is v1.x)
PANDOC := /usr/local/bin/pandoc
# Installing LaTeX "properly" is... tricky. Docker to the rescue!
PDF_PANDOC := docker run --rm -v $(shell pwd):/source zgulde/pandoc
# template file to use for html generation
PANDOC_TEMPLATE := misc/pandoc-github-template.html
$(PANDOC_TEMPLATE):
	curl https://raw.githubusercontent.com/tajmone/pandoc-goodies/master/templates/html5/github/GitHub.html5 > $@

SRC_HANDOUTS := $(shell find handouts -name \*.md)
RMD_HANDOUTS := $(shell find handouts -name \*.rmd)
HANDOUTS_HTML := $(patsubst handouts/%.md, handouts/%.html, $(SRC_HANDOUTS))
HANDOUTS_PDF := $(patsubst handouts/%.md, handouts/%.pdf, $(SRC_HANDOUTS))

handouts/%.pdf: handouts/%.md
	$(PDF_PANDOC) -o $@ $<
handouts/%.pdf: handouts/%.rmd
	Rscript -e "rmarkdown::render('$<', output_file = '$@', output_dir = '$(dir $@)')"
handouts/%.html: handouts/%.md $(PANDOC_TEMPLATE)
	$(PANDOC) -o $@ --template $(PANDOC_TEMPLATE) $<

.PHONY: handouts-html handouts-pdf handouts setup-handouts
handouts-html: $(HANDOUTS_HTML)
handouts-pdf: $(HANDOUTS_PDF) $(patsubst handouts/%.rmd, handouts/%.pdf, $(RMD_HANDOUTS))
handouts: handouts-html handouts-pdf ## Build handouts

ORIGIN := $(shell git remote get-url origin)
handouts-publish: handouts ## Build and push handouts to the handouts branch
	cd handouts &&\
		git init &&\
		git remote add origin $(ORIGIN) &&\
		git add -f *.html *.pdf &&\
		git commit -m '[$(shell date)] Build handouts' &&\
		git push origin master:handouts -f
	rm -rf handouts/.git

##############
# Deployment #
##############

# User that can log in to the curriculum server to transfer the built curriculum
# files. You can override this by setting a value when invoking make, e.g.
#
#     $ make deploy DEPLOY_USER=codeup
#
# To use ``codeup`` as the user instead of your $USER
DEPLOY_USER = ${USER}

# Variables that define where we are deploying to
BUILD_DIR := build/site
DEPLOY_HOST := ds.codeup.com
DEPLOY_DIR := /srv/www/codeup.com/resources/curriculum/ds
DEPLOY_PUBLIC_DIR := /srv/www/codeup.com/public
DEPLOY_ASSETS := $(DEPLOY_PUBLIC_DIR)/assets
ASSETS_LOCATION := $(DEPLOY_USER)@$(DEPLOY_HOST):$(DEPLOY_ASSETS)
TAR := tar czf - $(BUILD_DIR)
UNTAR := tar xzmf - --strip-components=2 --no-overwrite-dir -C $(DEPLOY_DIR)

.PHONY: deploy
deploy: build ## Deploy the curriculum
	rsync --chmod=g+w -z $(BUILD_DIR)/assets/javascripts/lunr/* $(ASSETS_LOCATION)/javascripts/lunr
	rm -rf $(BUILD_DIR)/assets/javascripts/lunr
	rsync --chmod=g+w -z $(BUILD_DIR)/static-assets/* $(DEPLOY_USER)@$(DEPLOY_HOST):$(DEPLOY_PUBLIC_DIR)/static-assets
	rm -rf $(BUILD_DIR)/static-assets
	rsync --chmod=g+w -z $(BUILD_DIR)/assets/javascripts/* $(ASSETS_LOCATION)/javascripts
	rm -rf $(BUILD_DIR)/assets/javascripts
	rsync --chmod=g+w -z $(BUILD_DIR)/assets/stylesheets/* $(ASSETS_LOCATION)/stylesheets
	rm -rf $(BUILD_DIR)/assets/stylesheets
	$(TAR) | ssh $(DEPLOY_USER)@$(DEPLOY_HOST) '$(UNTAR) && (chmod -fR g+w $(DEPLOY_DIR)/* || true)'
	git tag "deploy$$(date +'%Y%m%d%H%M%S')"
	git push --tags

#########
# Setup #
#########

env.py:
	cp env-template.py env.py

.PHONY: setup-venv setup-env-files setup setup-deps
setup-venv: ## Create the virtual environment for curriculum builds
	which python3 || (echo 'missing python3' && false)
	python3 -m venv --help >/dev/null || (echo 'missing venv module' && false)
	@echo 'Setting up virtual environment...'
	@[ -d build/env ] || (cd build && python3 -m venv env && . env/bin/activate && pip install -r requirements.txt)
	@echo 'All Done!'
setup-env-files: env.py
	for dir in $$(ls -dG1 content/*/) ; do ln -fs ../../env.py $$dir/ ; done
	ln -fs ../env.py database/env.py
setup-deps: ## Install and setup all the necessary data science libraries
	@brew install graphviz
	@brew install openjdk@11
	@python -m pip install --upgrade jupyter pymysql wordcloud mglearn pydataset afinn pyspark seaborn nltk sqlalchemy plotly statsmodels beautifulsoup4 pyyaml vega_datasets
	@python -m pip install --upgrade 'Pygments>=2.4.1'
	@python -c 'import nltk; nltk.download("all");'

setup: setup-venv setup-env-files setup-deps ## Perform first-time project setup

########
# Misc #
########

.PHONY: clean
clean: ## Clean up built files
	@rm -rf build/markdown build/site

.PHONY: run-modified
run-modified: ## Run any modified notebooks from top to bottom
	./scripts/run-modified.sh

.PHONY: nbserver
nbserver: ## Start the jupyter notebook server in the content directory
	@cd content && jupyter notebook

.PHONY: syllabus
syllabus: syllabus.pdf ## Render the syllabus pdf
syllabus.pdf: misc/syllabus.md misc/syllabus-template.latex
	@docker run --rm -v $(shell pwd):/source zgulde/pandoc -o syllabus.pdf --template misc/syllabus-template.latex misc/syllabus.md

.PHONY: toc-audit
toc-audit: ## Audit the table of contents for any file path mismatches
	@python scripts/toc-audit.py
